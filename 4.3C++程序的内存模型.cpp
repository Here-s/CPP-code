#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
using namespace std;

//内存分区模型
//C++程序在执行时，将内存分为4个区域
//1 代码区 存放函数的二进制代码 由操作系统进行管理的  放的是二进制
//2 全局区 存放全局变量和静态常量及常量
//3 栈区   由编译器自动分配释放 存放函数的参数值 局部变量等
//4 堆区   由程序员分配和释放 若程序员不释放 程序结束时由操作系统回收
//内存分四区意义：不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编

//在堆区利用new开辟数组   delete释放数组的时候要有一个[] 说明是数组 如果不加[] 的话就只会释放一个数据
void fun()
{
	//创建10个整型的数组
	int* arr = new int[10];//因为是中括号 说明创建了数组 数组由10个元素 因为返回的还是首元素地址
	int a = 0;
	for (a = 0; a < 10; a++)
	{
		arr[a] = a + 100;//给10个元素赋值 值区间是 100-109
	}
	for (a = 0; a < 10; a++)
	{
		cout << arr[a] << endl;
	}
	delete[] arr;//说明释放的是一个数组 数组叫arr
}
int main()
{
	fun();
	return 0;
}

//new操作符: C++中利用new操作符在堆区开辟数据 
//堆区开辟的数据，由程序员手动开辟 手动释放 释放利用操作符 delete  若程序员不释放 程序结束时由操作系统回收
//利用new创建的数据，会返回该数据对应的类型的指针
//int* fun()
//{
//	//new的基本语法
//	//在堆区创建整型数据  new返回的是该数据类型的指针
//	int* p = new int(10);//是什么数据类型就用什么来接收
//	return p;
//}
//int main()
//{
//	int* p = fun();
//	cout << *p << endl;//程序员没使用delete释放 它就一直在
//	delete p;//通过delete关键字 来释放堆区的数据
//	cout << *p << endl;//因为内存已经被释放了，所以再次访问就是非法访问
//	return 0;
//}

//程序运行后 会有堆区  利用new关键字可以创建堆区
//堆区：由程序员分配释放，若程序员不释放，程序结束时由操作系统回收
//在C++中主要利用new在堆区开辟内存
//在堆区开辟数据
//int* fun()
//{
//	//利用new关键字 可以将数据开辟到堆区
//	int* p = new int(10);//开辟的内存编号用指针来接收  指针是一个局部变量 放在栈上 
//	//指针保持的数据是放在堆区 new是把堆区的地址给出来
//	return p;//返回指针
//}
//int main()
//{
//	int* p = fun();//用指针来接收
//	cout << *p << endl;//输出堆区的结果
//	return 0;
//}

//程序运行后
//栈区：由编译器自动分配释放 存放函数的参数值 局部变量等
//注意事项：不要返回局部变量的地址 栈区开辟的数据由编译器自动释放
//int* fun(int b)//形参的数据也会放在栈区
//{
//	b = 100;
//	int a = 10;//创建的局部变量 因为局部变量存放在栈区 ，栈区的数据在函数执行完之后自动释放
//	return &a;//返回局部变量的地址
//}
//int main()
//{
//	int* p=fun();//指针指向a处的地址
//	cout << *p << endl;//因为编译器是作为保留 可能是误操作
//	cout << *p << endl;//第二次就不保留了
//	return 0;
//}

//常量 
//字符串常量 双引号引起来的常量
//const修饰的常量
//不在全局区的有：局部变量 const修饰的局部变量（局部常量）
//全局区中有：全局变量 静态变量 static关键字 常量 字符串常量 const修饰的全局变量（全局常量）
//const int a = 10;//const修饰的全局常量
//int main()
//{
//	cout << (int)&"byte dance" << endl;//发现字符串常量的地址和全局区 静态变量的地址相近
//	//const修饰的全局常量
//	cout <<(int) &a << endl;//const修饰的全局常量  和静态变量的地址相近
//	const int b = 0;//const修饰的局部变量 和局部变量地址相近
//	cout << (int) &b << endl;
//	return 0;
//}

//代码区：exe可执行文件
//存放cpu执行的机器指令  
//代码区是共享的：因为对于频繁执行的程序 只需要在内存中有一份代码就行了
//代码区是只读的：防止程序意外地修改了它的指令

//全局区：包括常量区，字符串常量，和其它常量也存放在此
//该区域的数据在程序结束后由操作系统释放
//存放全局变量和静态常量及常量

//int c = 10;//全局变量
//int d = 10;
//int main()//全局区  全局变量和局部变量的存放地方不一样
//{
//	int a = 10;
//	int b = 20;
//	cout << (int)&a << endl;
//	cout << (int)&b << endl;
//	cout << (int)&c << endl;
//	cout << (int)&d << endl;
//	static int e = 10;//加static 就是静态常量
//	static int f = 10;
//	cout << (int)&e << endl;//静态常量和全局变量放在一个区域中
//	cout << (int)&f << endl;
//	return 0;
//}